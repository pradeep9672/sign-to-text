{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eaxsEdhwoCjO",
        "outputId": "d76cbdbc-d077-4213-90d9-07ad3ad8b00f"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.6.17)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.17.1)\n",
            "Requirement already satisfied: keras in /usr/local/lib/python3.11/dist-packages (3.5.0)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2024.12.14)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.3.0)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.21)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.69.0)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.17.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.26.4)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras) (0.14.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.10)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.11/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.17.1)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.21)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.5)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.32.3)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.69.0)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.17.1)\n",
            "Requirement already satisfied: keras>=3.2.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.5.0)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.26.4)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->tensorflow) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->tensorflow) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras>=3.2.0->tensorflow) (0.14.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests<3,>=2.21.0->tensorflow) (2024.12.14)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from werkzeug>=1.0.1->tensorboard<2.18,>=2.17->tensorflow) (3.0.2)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.2.0->tensorflow) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras>=3.2.0->tensorflow) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras>=3.2.0->tensorflow) (0.1.2)\n",
            "Requirement already satisfied: kaggle in /usr/local/lib/python3.11/dist-packages (1.6.17)\n",
            "Requirement already satisfied: tensorflow in /usr/local/lib/python3.11/dist-packages (2.17.1)\n",
            "Requirement already satisfied: keras in /usr/local/lib/python3.11/dist-packages (3.5.0)\n",
            "Requirement already satisfied: torch in /usr/local/lib/python3.11/dist-packages (2.5.1+cu121)\n",
            "Requirement already satisfied: torchvision in /usr/local/lib/python3.11/dist-packages (0.20.1+cu121)\n",
            "Requirement already satisfied: six>=1.10 in /usr/local/lib/python3.11/dist-packages (from kaggle) (1.17.0)\n",
            "Requirement already satisfied: certifi>=2023.7.22 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2024.12.14)\n",
            "Requirement already satisfied: python-dateutil in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.8.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.32.3)\n",
            "Requirement already satisfied: tqdm in /usr/local/lib/python3.11/dist-packages (from kaggle) (4.67.1)\n",
            "Requirement already satisfied: python-slugify in /usr/local/lib/python3.11/dist-packages (from kaggle) (8.0.4)\n",
            "Requirement already satisfied: urllib3 in /usr/local/lib/python3.11/dist-packages (from kaggle) (2.3.0)\n",
            "Requirement already satisfied: bleach in /usr/local/lib/python3.11/dist-packages (from kaggle) (6.2.0)\n",
            "Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.4.0)\n",
            "Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: flatbuffers>=24.3.25 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (25.1.21)\n",
            "Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.6.0)\n",
            "Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py>=3.10.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.12.1)\n",
            "Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (18.1.1)\n",
            "Requirement already satisfied: ml-dtypes<0.5.0,>=0.3.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.4.1)\n",
            "Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (3.4.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from tensorflow) (24.2)\n",
            "Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.25.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from tensorflow) (75.1.0)\n",
            "Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.5.0)\n",
            "Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (4.12.2)\n",
            "Requirement already satisfied: wrapt>=1.11.0 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.17.2)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.69.0)\n",
            "Requirement already satisfied: tensorboard<2.18,>=2.17 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (2.17.1)\n",
            "Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (0.37.1)\n",
            "Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.11/dist-packages (from tensorflow) (1.26.4)\n",
            "Requirement already satisfied: rich in /usr/local/lib/python3.11/dist-packages (from keras) (13.9.4)\n",
            "Requirement already satisfied: namex in /usr/local/lib/python3.11/dist-packages (from keras) (0.0.8)\n",
            "Requirement already satisfied: optree in /usr/local/lib/python3.11/dist-packages (from keras) (0.14.0)\n",
            "Requirement already satisfied: filelock in /usr/local/lib/python3.11/dist-packages (from torch) (3.17.0)\n",
            "Requirement already satisfied: networkx in /usr/local/lib/python3.11/dist-packages (from torch) (3.4.2)\n",
            "Requirement already satisfied: jinja2 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.5)\n",
            "Requirement already satisfied: fsspec in /usr/local/lib/python3.11/dist-packages (from torch) (2024.10.0)\n",
            "Requirement already satisfied: nvidia-cuda-nvrtc-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-runtime-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cuda-cupti-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.105)\n",
            "Requirement already satisfied: nvidia-cudnn-cu12==9.1.0.70 in /usr/local/lib/python3.11/dist-packages (from torch) (9.1.0.70)\n",
            "Requirement already satisfied: nvidia-cublas-cu12==12.1.3.1 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.3.1)\n",
            "Requirement already satisfied: nvidia-cufft-cu12==11.0.2.54 in /usr/local/lib/python3.11/dist-packages (from torch) (11.0.2.54)\n",
            "Requirement already satisfied: nvidia-curand-cu12==10.3.2.106 in /usr/local/lib/python3.11/dist-packages (from torch) (10.3.2.106)\n",
            "Requirement already satisfied: nvidia-cusolver-cu12==11.4.5.107 in /usr/local/lib/python3.11/dist-packages (from torch) (11.4.5.107)\n",
            "Requirement already satisfied: nvidia-cusparse-cu12==12.1.0.106 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.0.106)\n",
            "Requirement already satisfied: nvidia-nccl-cu12==2.21.5 in /usr/local/lib/python3.11/dist-packages (from torch) (2.21.5)\n",
            "Requirement already satisfied: nvidia-nvtx-cu12==12.1.105 in /usr/local/lib/python3.11/dist-packages (from torch) (12.1.105)\n",
            "Requirement already satisfied: triton==3.1.0 in /usr/local/lib/python3.11/dist-packages (from torch) (3.1.0)\n",
            "Requirement already satisfied: sympy==1.13.1 in /usr/local/lib/python3.11/dist-packages (from torch) (1.13.1)\n",
            "Requirement already satisfied: nvidia-nvjitlink-cu12 in /usr/local/lib/python3.11/dist-packages (from nvidia-cusolver-cu12==11.4.5.107->torch) (12.6.85)\n",
            "Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy==1.13.1->torch) (1.3.0)\n",
            "Requirement already satisfied: pillow!=8.3.*,>=5.3.0 in /usr/local/lib/python3.11/dist-packages (from torchvision) (11.1.0)\n",
            "Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.11/dist-packages (from astunparse>=1.6.0->tensorflow) (0.45.1)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->kaggle) (3.10)\n",
            "Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.7)\n",
            "Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (0.7.2)\n",
            "Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from tensorboard<2.18,>=2.17->tensorflow) (3.1.3)\n",
            "Requirement already satisfied: webencodings in /usr/local/lib/python3.11/dist-packages (from bleach->kaggle) (0.5.1)\n",
            "Requirement already satisfied: MarkupSafe>=2.0 in /usr/local/lib/python3.11/dist-packages (from jinja2->torch) (3.0.2)\n",
            "Requirement already satisfied: text-unidecode>=1.3 in /usr/local/lib/python3.11/dist-packages (from python-slugify->kaggle) (1.3)\n",
            "Requirement already satisfied: markdown-it-py>=2.2.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras) (3.0.0)\n",
            "Requirement already satisfied: pygments<3.0.0,>=2.13.0 in /usr/local/lib/python3.11/dist-packages (from rich->keras) (2.18.0)\n",
            "Requirement already satisfied: mdurl~=0.1 in /usr/local/lib/python3.11/dist-packages (from markdown-it-py>=2.2.0->rich->keras) (0.1.2)\n"
          ]
        }
      ],
      "source": [
        "# Step 1: Install Required Packages\n",
        "!pip install kaggle tensorflow keras\n",
        "!pip install tensorflow\n",
        "!pip install kaggle tensorflow keras torch torchvision"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "i3b9Uw8bkoNn"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import zipfile\n",
        "import random\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import cv2\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report, confusion_matrix\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "from torchvision import models as torch_models, transforms\n",
        "from PIL import Image\n",
        "from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wqBoqe6BlIme",
        "outputId": "d82f8a7f-5cd3-4937-e5af-fba4decac980"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Dataset URL: https://www.kaggle.com/datasets/datamunge/sign-language-mnist\n",
            "License(s): CC0-1.0\n",
            "sign-language-mnist.zip: Skipping, found more recently modified local copy (use --force to force download)\n"
          ]
        }
      ],
      "source": [
        "# Step 1: Download the dataset\n",
        "dataset_name = \"datamunge/sign-language-mnist\"\n",
        "!kaggle datasets download -d {dataset_name}  # Download the dataset from Kaggle\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gmH2wTY-lKEl"
      },
      "outputs": [],
      "source": [
        "# Step 2: Extract the dataset\n",
        "zip_file = \"sign-language-mnist.zip\"  # Name of the downloaded zip file\n",
        "dataset_dir = \"/content/sign_language_mnist\"  # Directory to extract the dataset\n",
        "# Check if the dataset directory exists, if not, create it and extract the zip file\n",
        "if not os.path.exists(dataset_dir):\n",
        "    os.makedirs(dataset_dir)  # Create the directory if it doesn't exist\n",
        "\n",
        "# Extract the zip file\n",
        "with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n",
        "    zip_ref.extractall(dataset_dir)  # Extract all contents to the specified directory"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_i1Ti1YKlJpG"
      },
      "outputs": [],
      "source": [
        "# Step 3: Load the dataset\n",
        "# Load the training and test data\n",
        "train_data = pd.read_csv(os.path.join(dataset_dir, 'sign_mnist_train.csv'))\n",
        "test_data = pd.read_csv(os.path.join(dataset_dir, 'sign_mnist_test.csv'))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "l7x9baCHlqyT",
        "outputId": "33c9dc06-4e93-4d93-b73d-dca17623e46a"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1500x500 with 10 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Step 3.1: Visualize some images from the dataset\n",
        "def plot_images(images, labels, num_images=10):\n",
        "    plt.figure(figsize=(15, 5))\n",
        "    for i in range(num_images):\n",
        "        plt.subplot(2, 5, i + 1)\n",
        "        plt.imshow(images[i], cmap='gray')\n",
        "        plt.title(f'Label: {labels[i]}')\n",
        "        plt.axis('off')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Display 10 random images from the training set\n",
        "random_indices = np.random.choice(len(X_train), size=10, replace=False)\n",
        "plot_images(X_train[random_indices], y_train[random_indices])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Dmoz33mWlfM7"
      },
      "outputs": [],
      "source": [
        "# Step 4: Preprocess the data\n",
        "# Separate labels and pixel values\n",
        "X_train = train_data.drop('label', axis=1).values  # Drop the label column\n",
        "y_train = train_data['label'].values  # Get the labels\n",
        "X_test = test_data.drop('label', axis=1).values  # Drop the label column\n",
        "y_test = test_data['label'].values  # Get the labels\n",
        "\n",
        "# Normalize pixel values to [0, 1]\n",
        "X_train = X_train.astype('float32') / 255.0\n",
        "X_test = X_test.astype('float32') / 255.0\n",
        "\n",
        "# Resize the data to 32x32 images\n",
        "X_train = X_train.reshape(-1, 28, 28, 1)  # Reshape to (num_samples, 28, 28, 1)\n",
        "X_test = X_test.reshape(-1, 28, 28, 1)  # Reshape to (num_samples, 28, 28, 1)\n",
        "\n",
        "# Resize images to 32x32\n",
        "X_train = tf.image.resize(X_train, [32, 32]).numpy()  # Resize to (num_samples, 32, 32, 1)\n",
        "X_test = tf.image.resize(X_test, [32, 32]).numpy()  # Resize to (num_samples, 32, 32, 1)\n",
        "\n",
        "# Convert grayscale to RGB\n",
        "X_train = np.repeat(X_train, 3, axis=-1)  # Convert to (num_samples, 32, 32, 3)\n",
        "X_test = np.repeat(X_test, 3, axis=-1)  # Convert to (num_samples, 32, 32, 3)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IlQ8ZUI7lm60"
      },
      "outputs": [],
      "source": [
        "# Step 5: Data Augmentation\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range=15,\n",
        "    width_shift_range=0.1,\n",
        "    height_shift_range=0.1,\n",
        "    shear_range=0.1,\n",
        "    zoom_range=0.1,\n",
        "    horizontal_flip=False,\n",
        "    fill_mode='nearest'\n",
        ")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "id": "vS24_cn0mEQY",
        "outputId": "1df50cd7-4078-45b9-d3a2-634d54978d6d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/30\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/trainers/data_adapters/py_dataset_adapter.py:122: UserWarning: Your `PyDataset` class should call `super().__init__(**kwargs)` in its constructor. `**kwargs` can include `workers`, `use_multiprocessing`, `max_queue_size`. Do not pass these arguments to `fit()`, as they will be ignored.\n",
            "  self._warn_if_super_not_called()\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m185s\u001b[0m 203ms/step - accuracy: 0.4757 - loss: 1.7624 - val_accuracy: 0.7975 - val_loss: 0.6240 - learning_rate: 0.0010\n",
            "Epoch 2/30\n",
            "\u001b[1m  1/857\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m1:49\u001b[0m 128ms/step - accuracy: 0.7188 - loss: 0.9912"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/lib/python3.11/contextlib.py:158: UserWarning: Your input ran out of data; interrupting training. Make sure that your dataset or generator can generate at least `steps_per_epoch * epochs` batches. You may need to use the `.repeat()` function when building your dataset.\n",
            "  self.gen.throw(typ, value, traceback)\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 33ms/step - accuracy: 0.7188 - loss: 0.9912 - val_accuracy: 0.7956 - val_loss: 0.6229 - learning_rate: 0.0010\n",
            "Epoch 3/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m184s\u001b[0m 214ms/step - accuracy: 0.7304 - loss: 0.8330 - val_accuracy: 0.8281 - val_loss: 0.4894 - learning_rate: 0.0010\n",
            "Epoch 4/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.8750 - loss: 0.4510 - val_accuracy: 0.8288 - val_loss: 0.4878 - learning_rate: 0.0010\n",
            "Epoch 5/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 196ms/step - accuracy: 0.7929 - loss: 0.6339 - val_accuracy: 0.8590 - val_loss: 0.3989 - learning_rate: 0.0010\n",
            "Epoch 6/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.6875 - loss: 0.7499 - val_accuracy: 0.8617 - val_loss: 0.3915 - learning_rate: 0.0010\n",
            "Epoch 7/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 196ms/step - accuracy: 0.8150 - loss: 0.5507 - val_accuracy: 0.8840 - val_loss: 0.3256 - learning_rate: 0.0010\n",
            "Epoch 8/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 33ms/step - accuracy: 0.9062 - loss: 0.3945 - val_accuracy: 0.8841 - val_loss: 0.3288 - learning_rate: 0.0010\n",
            "Epoch 9/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m185s\u001b[0m 210ms/step - accuracy: 0.8402 - loss: 0.4721 - val_accuracy: 0.8851 - val_loss: 0.2975 - learning_rate: 0.0010\n",
            "Epoch 10/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m34s\u001b[0m 40ms/step - accuracy: 0.7188 - loss: 0.7349 - val_accuracy: 0.8840 - val_loss: 0.3000 - learning_rate: 0.0010\n",
            "Epoch 11/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m171s\u001b[0m 199ms/step - accuracy: 0.8497 - loss: 0.4405 - val_accuracy: 0.8992 - val_loss: 0.2910 - learning_rate: 0.0010\n",
            "Epoch 12/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.7188 - loss: 0.4684 - val_accuracy: 0.8975 - val_loss: 0.2947 - learning_rate: 0.0010\n",
            "Epoch 13/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m181s\u001b[0m 211ms/step - accuracy: 0.8658 - loss: 0.4029 - val_accuracy: 0.9225 - val_loss: 0.2307 - learning_rate: 0.0010\n",
            "Epoch 14/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 33ms/step - accuracy: 0.9062 - loss: 0.3660 - val_accuracy: 0.9226 - val_loss: 0.2301 - learning_rate: 0.0010\n",
            "Epoch 15/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m167s\u001b[0m 195ms/step - accuracy: 0.8675 - loss: 0.3870 - val_accuracy: 0.9098 - val_loss: 0.2506 - learning_rate: 0.0010\n",
            "Epoch 16/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 33ms/step - accuracy: 0.8750 - loss: 0.3675 - val_accuracy: 0.9117 - val_loss: 0.2466 - learning_rate: 0.0010\n",
            "Epoch 17/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 167ms/step - accuracy: 0.8754 - loss: 0.3649\n",
            "Epoch 17: ReduceLROnPlateau reducing learning rate to 0.0005000000237487257.\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m184s\u001b[0m 215ms/step - accuracy: 0.8754 - loss: 0.3649 - val_accuracy: 0.9018 - val_loss: 0.2586 - learning_rate: 0.0010\n",
            "Epoch 18/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m29s\u001b[0m 33ms/step - accuracy: 0.9062 - loss: 0.3469 - val_accuracy: 0.9020 - val_loss: 0.2573 - learning_rate: 5.0000e-04\n",
            "Epoch 19/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 196ms/step - accuracy: 0.8977 - loss: 0.3005 - val_accuracy: 0.9322 - val_loss: 0.1827 - learning_rate: 5.0000e-04\n",
            "Epoch 20/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.9062 - loss: 0.2343 - val_accuracy: 0.9329 - val_loss: 0.1828 - learning_rate: 5.0000e-04\n",
            "Epoch 21/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 195ms/step - accuracy: 0.9085 - loss: 0.2674 - val_accuracy: 0.9340 - val_loss: 0.1871 - learning_rate: 5.0000e-04\n",
            "Epoch 22/30\n",
            "\u001b[1m  1/857\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m1:44\u001b[0m 122ms/step - accuracy: 0.9062 - loss: 0.2315\n",
            "Epoch 22: ReduceLROnPlateau reducing learning rate to 0.0002500000118743628.\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.9062 - loss: 0.2315 - val_accuracy: 0.9329 - val_loss: 0.1877 - learning_rate: 5.0000e-04\n",
            "Epoch 23/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m168s\u001b[0m 195ms/step - accuracy: 0.9194 - loss: 0.2371 - val_accuracy: 0.9391 - val_loss: 0.1575 - learning_rate: 2.5000e-04\n",
            "Epoch 24/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 33ms/step - accuracy: 0.9688 - loss: 0.1450 - val_accuracy: 0.9391 - val_loss: 0.1575 - learning_rate: 2.5000e-04\n",
            "Epoch 25/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m183s\u001b[0m 207ms/step - accuracy: 0.9246 - loss: 0.2219 - val_accuracy: 0.9547 - val_loss: 0.1374 - learning_rate: 2.5000e-04\n",
            "Epoch 26/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m28s\u001b[0m 33ms/step - accuracy: 0.9062 - loss: 0.3288 - val_accuracy: 0.9551 - val_loss: 0.1367 - learning_rate: 2.5000e-04\n",
            "Epoch 27/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m162s\u001b[0m 189ms/step - accuracy: 0.9243 - loss: 0.2195 - val_accuracy: 0.9474 - val_loss: 0.1433 - learning_rate: 2.5000e-04\n",
            "Epoch 28/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.9375 - loss: 0.2223 - val_accuracy: 0.9470 - val_loss: 0.1434 - learning_rate: 2.5000e-04\n",
            "Epoch 29/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m235s\u001b[0m 205ms/step - accuracy: 0.9290 - loss: 0.2083 - val_accuracy: 0.9589 - val_loss: 0.1286 - learning_rate: 2.5000e-04\n",
            "Epoch 30/30\n",
            "\u001b[1m857/857\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m41s\u001b[0m 48ms/step - accuracy: 0.9062 - loss: 0.2085 - val_accuracy: 0.9591 - val_loss: 0.1287 - learning_rate: 2.5000e-04\n"
          ]
        }
      ],
      "source": [
        "# Step 6: Build the model using ResNet-50 and LSTM\n",
        "def create_model():\n",
        "    # Load ResNet50 as a feature extractor\n",
        "    base_model = tf.keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(32, 32, 3))\n",
        "    base_model.trainable = False  # Initially freeze the base model\n",
        "\n",
        "    # Create the model\n",
        "    model = models.Sequential()\n",
        "    model.add(base_model)  # Add ResNet50\n",
        "    model.add(layers.GlobalAveragePooling2D())  # Global average pooling to reduce dimensions\n",
        "    model.add(layers.BatchNormalization())  # Add Batch Normalization\n",
        "    model.add(layers.RepeatVector(1))  # Repeat the feature vector for LSTM input\n",
        "    model.add(layers.LSTM(128, return_sequences=False))  # LSTM layer\n",
        "    model.add(layers.BatchNormalization())  # Add Batch Normalization\n",
        "    model.add(layers.Dense(26, activation='softmax'))  # Output layer for 26 classes\n",
        "\n",
        "    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "\n",
        "# Create and train the model\n",
        "model = create_model()\n",
        "\n",
        "# Early stopping and learning rate reduction\n",
        "early_stopping = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)\n",
        "lr_reduction = ReduceLROnPlateau(monitor='val_loss', factor=0.5, patience=3, verbose=1)\n",
        "\n",
        "# Calculate steps per epoch\n",
        "batch_size = 32\n",
        "steps_per_epoch = len(X_train) // batch_size\n",
        "\n",
        "# Fit the model using data augmentation with increased epochs\n",
        "history = model.fit(datagen.flow(X_train, y_train, batch_size=batch_size),\n",
        "                    epochs=30,  # Increased epochs to 30\n",
        "                    validation_data=(X_test, y_test),\n",
        "                    steps_per_epoch=steps_per_epoch,\n",
        "                    callbacks=[early_stopping, lr_reduction])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "X6iFyO1posIW",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 484
        },
        "outputId": "d2fc617a-44ea-4619-a131-38ca6cff39c9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m225/225\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 164ms/step - accuracy: 0.9559 - loss: 0.1379\n",
            "Test Accuracy: 95.89%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Step 7: Evaluate the model\n",
        "loss, accuracy = model.evaluate(X_test, y_test)\n",
        "print(f'Test Accuracy: {accuracy * 100:.2f}%')\n",
        "\n",
        "# Plot training history\n",
        "plt.plot(history.history['accuracy'], label='accuracy')\n",
        "plt.plot(history.history['val_accuracy'], label='val_accuracy')\n",
        "plt.xlabel('Epoch')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "ISMYsO04o0sV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "2c39930e-bca0-4c1c-8809-564f06a5289d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m225/225\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m31s\u001b[0m 137ms/step\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       0.98      0.99      0.99       331\n",
            "           1       1.00      1.00      1.00       432\n",
            "           2       0.97      0.93      0.95       310\n",
            "           3       0.97      0.93      0.95       245\n",
            "           4       0.96      0.97      0.96       498\n",
            "           5       1.00      1.00      1.00       247\n",
            "           6       0.98      0.93      0.96       348\n",
            "           7       1.00      0.98      0.99       436\n",
            "           8       0.92      0.99      0.95       288\n",
            "          10       0.96      1.00      0.98       331\n",
            "          11       0.92      1.00      0.96       209\n",
            "          12       0.97      0.93      0.95       394\n",
            "          13       0.89      0.96      0.93       291\n",
            "          14       0.92      0.98      0.95       246\n",
            "          15       1.00      1.00      1.00       347\n",
            "          16       1.00      1.00      1.00       164\n",
            "          17       0.82      0.89      0.85       144\n",
            "          18       0.95      0.91      0.93       246\n",
            "          19       0.92      0.97      0.95       248\n",
            "          20       0.86      0.85      0.85       266\n",
            "          21       1.00      0.88      0.94       346\n",
            "          22       0.90      1.00      0.95       206\n",
            "          23       0.99      1.00      0.99       267\n",
            "          24       1.00      0.92      0.96       332\n",
            "\n",
            "    accuracy                           0.96      7172\n",
            "   macro avg       0.95      0.96      0.96      7172\n",
            "weighted avg       0.96      0.96      0.96      7172\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Step 7.1: Visualize some test images with their predictions\n",
        "def plot_test_images(images, true_labels, predicted_labels, num_images=10):\n",
        "    plt.figure(figsize=(15, 5))\n",
        "    for i in range(num_images):\n",
        "        plt.subplot(2, 5, i + 1)\n",
        "        plt.imshow(images[i], cmap='gray')\n",
        "        plt.title(f'True: {true_labels[i]}\\nPred: {predicted_labels[i]}')\n",
        "        plt.axis('off')\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# Get predictions for the test set\n",
        "predictions = model.predict(X_test)\n",
        "predicted_labels = np.argmax(predictions, axis=1)  # Get the class with the highest probability\n",
        "\n",
        "# Display 10 random test images with their true and predicted labels\n",
        "random_indices = np.random.choice(len(X_test), size=10, replace=False)\n",
        "plot_test_images(X_test[random_indices], y_test[random_indices], predicted_labels[random_indices])\n",
        "\n",
        "# Generate a classification report\n",
        "report = classification_report(y_test, predicted_labels)\n",
        "print(\"Classification Report:\\n\", report)\n",
        "\n",
        "# Generate a confusion matrix\n",
        "conf_matrix = confusion_matrix(y_test, predicted_labels)\n",
        "\n",
        "# Plot the confusion matrix\n",
        "plt.figure(figsize=(10, 8))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')\n",
        "plt.xlabel('Predicted Label')\n",
        "plt.ylabel('True Label')\n",
        "plt.title('Confusion Matrix')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 38,
      "metadata": {
        "id": "E-vLO_ORo-0F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 442
        },
        "outputId": "f8def4dc-535c-4eed-e8cb-ab9a8ccf75c8"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1mModel: \"sequential_4\"\u001b[0m\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential_4\"</span>\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                        \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape               \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m        Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ resnet50 (\u001b[38;5;33mFunctional\u001b[0m)                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2048\u001b[0m)          │      \u001b[38;5;34m23,587,712\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling2d_4           │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)                │               \u001b[38;5;34m0\u001b[0m │\n",
              "│ (\u001b[38;5;33mGlobalAveragePooling2D\u001b[0m)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2048\u001b[0m)                │           \u001b[38;5;34m8,192\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ repeat_vector_4 (\u001b[38;5;33mRepeatVector\u001b[0m)       │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m, \u001b[38;5;34m2048\u001b[0m)             │               \u001b[38;5;34m0\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_4 (\u001b[38;5;33mLSTM\u001b[0m)                        │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │       \u001b[38;5;34m1,114,624\u001b[0m │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_9                │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)                 │             \u001b[38;5;34m512\u001b[0m │\n",
              "│ (\u001b[38;5;33mBatchNormalization\u001b[0m)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (\u001b[38;5;33mDense\u001b[0m)                      │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m)                  │           \u001b[38;5;34m3,354\u001b[0m │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━┓\n",
              "┃<span style=\"font-weight: bold\"> Layer (type)                         </span>┃<span style=\"font-weight: bold\"> Output Shape                </span>┃<span style=\"font-weight: bold\">         Param # </span>┃\n",
              "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━┩\n",
              "│ resnet50 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Functional</span>)                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)          │      <span style=\"color: #00af00; text-decoration-color: #00af00\">23,587,712</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ global_average_pooling2d_4           │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)                │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GlobalAveragePooling2D</span>)             │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_8                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)                │           <span style=\"color: #00af00; text-decoration-color: #00af00\">8,192</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ repeat_vector_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">RepeatVector</span>)       │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2048</span>)             │               <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ lstm_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">LSTM</span>)                        │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │       <span style=\"color: #00af00; text-decoration-color: #00af00\">1,114,624</span> │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ batch_normalization_9                │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)                 │             <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span> │\n",
              "│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">BatchNormalization</span>)                 │                             │                 │\n",
              "├──────────────────────────────────────┼─────────────────────────────┼─────────────────┤\n",
              "│ dense_4 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                      │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>)                  │           <span style=\"color: #00af00; text-decoration-color: #00af00\">3,354</span> │\n",
              "└──────────────────────────────────────┴─────────────────────────────┴─────────────────┘\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m26,959,056\u001b[0m (102.84 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">26,959,056</span> (102.84 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m1,122,330\u001b[0m (4.28 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,122,330</span> (4.28 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m23,592,064\u001b[0m (90.00 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">23,592,064</span> (90.00 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m2,244,662\u001b[0m (8.56 MB)\n"
            ],
            "text/html": [
              "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,244,662</span> (8.56 MB)\n",
              "</pre>\n"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "model.summary()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install opencv-python"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KbpyHawb-CJV",
        "outputId": "6834e329-3de2-48e5-f606-26b0aec780aa"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: opencv-python in /usr/local/lib/python3.11/dist-packages (4.10.0.84)\n",
            "Requirement already satisfied: numpy>=1.21.2 in /usr/local/lib/python3.11/dist-packages (from opencv-python) (1.26.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_3d_model():\n",
        "    # Load a 3D CNN as a feature extractor\n",
        "    base_model = tf.keras.applications.ResNet50(weights='imagenet', include_top=False, input_shape=(32, 32, 32, 3))\n",
        "    base_model.trainable = True  # Unfreeze the base model for fine-tuning\n",
        "\n",
        "    # Create the model\n",
        "    model = models.Sequential()\n",
        "    model.add(base_model)  # Add ResNet50\n",
        "    model.add(layers.GlobalAveragePooling3D())  # Global average pooling to reduce dimensions\n",
        "    model.add(layers.Dense(26, activation='softmax'))  # Output layer for 26 classes\n",
        "\n",
        "    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n",
        "    return model"
      ],
      "metadata": {
        "id": "75WQigEV852D"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def get_3d_cam(model, img, class_index):\n",
        "    # Convert the image to a tensor and add a batch dimension\n",
        "    img_tensor = tf.convert_to_tensor(img)\n",
        "    img_tensor = tf.expand_dims(img_tensor, axis=0)  # Shape: (1, depth, height, width, channels)\n",
        "\n",
        "    with tf.GradientTape() as tape:\n",
        "        # Make a prediction\n",
        "        tape.watch(img_tensor)\n",
        "        predictions = model(img_tensor)\n",
        "        loss = predictions[0, class_index]  # Get the score for the target class\n",
        "\n",
        "    # Compute the gradients of the loss with respect to the input image\n",
        "    grads = tape.gradient(loss, img_tensor)[0]  # Shape: (depth, height, width, channels)\n",
        "\n",
        "    # Generate the CAM\n",
        "    weights = tf.reduce_mean(grads, axis=(0, 1, 2))  # Global average pooling\n",
        "    cam = tf.reduce_sum(tf.multiply(weights, img_tensor[0]), axis=-1)  # Shape: (height, width)\n",
        "\n",
        "    # Post-process CAM for visualization\n",
        "    cam = tf.maximum(cam, 0)  # Apply ReLU\n",
        "    cam = cam / tf.reduce_max(cam)  # Normalize\n",
        "    return cam.numpy()"
      ],
      "metadata": {
        "id": "kpYCG5qs9FB3"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def display_3d_cam(images, true_labels, predicted_labels):\n",
        "    num_images = len(images)\n",
        "\n",
        "    plt.figure(figsize=(15, 5))\n",
        "    for i in range(num_images):\n",
        "        plt.subplot(2, num_images, i + 1)\n",
        "        plt.imshow(images[i][:, :, 0], cmap='gray')  # Display the first channel of the image\n",
        "        plt.title(f'True: {true_labels[i]}\\nPred: {predicted_labels[i]}')\n",
        "        plt.axis('off')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "    plt.figure(figsize=(15, 5))\n",
        "    for i in range(num_images):\n",
        "        plt.subplot(2, num_images, i + 1)\n",
        "        cam = get_3d_cam(model, images[i], predicted_labels[i])\n",
        "        plt.imshow(cam, cmap='magma')\n",
        "        plt.title(f'3D CAM\\nPred: {predicted_labels[i]}')\n",
        "        plt.axis('off')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "Gm5oTm_s9JVo"
      },
      "execution_count": 74,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Example usage for 3D CAMs\n",
        "for i in range(2):\n",
        "    random_index = np.random.choice(len(X_test))\n",
        "    img = X_test[random_index]\n",
        "    true_label = y_test[random_index]\n",
        "    predicted_label = np.argmax(predictions[random_index])  # Get the predicted label\n",
        "\n",
        "    # Display the original image and its 3D CAM\n",
        "    display_3d_cam([img], [true_label], [predicted_label])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "btVnYyw39P-p",
        "outputId": "cfa60477-2e08-4e79-cb19-aa68fe79e14b"
      },
      "execution_count": 75,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}